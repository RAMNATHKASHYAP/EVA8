from __future__ import print_function
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms

...............................................

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 16, 3, padding=1)
        self.bn1 = nn.BatchNorm2d(16)
        self.conv2 = nn.Conv2d(16, 16, 3, padding=1)
        self.bn2 = nn.BatchNorm2d(16)
        self.pool1 = nn.MaxPool2d(2, 2)
        self.conv3 = nn.Conv2d(16, 32, 3, padding=1)
        self.bn3 = nn.BatchNorm2d(32)
        self.conv4 = nn.Conv2d(32, 32, 3, padding=1)
        self.bn4 = nn.BatchNorm2d(32)
        self.pool2 = nn.MaxPool2d(2, 2)
        self.conv5 = nn.Conv2d(32, 64, 3)
        self.bn5 = nn.BatchNorm2d(64)
        self.conv6 = nn.Conv2d(64, 64, 3)
        self.bn6 = nn.BatchNorm2d(64)
        self.gap = nn.AdaptiveAvgPool2d(1)
        self.fc = nn.Linear(64, 10)
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = self.pool1(F.relu(self.bn2(self.conv2(F.relu(self.bn1(self.conv1(x)))))))
        x = self.pool2(F.relu(self.bn4(self.conv4(F.relu(self.bn3(self.conv3(x)))))))
        x = F.relu(self.bn6(self.conv6(F.relu(self.bn5(self.conv5(x))))))
        x = self.gap(x)
        x = x.view(-1, 64)
        x = self.dropout(x)
        x = self.fc(x)
        return F.log_softmax(x,dim=-1)
        
   ................................................
   
pip install torchsummary
from torchsummary import summary
use_cuda = torch.cuda.is_available()
device = torch.device("cuda" if use_cuda else "cpu")
model = Net().to(device)
summary(model, input_size=(1, 28, 28))

Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/
Requirement already satisfied: torchsummary in /usr/local/lib/python3.8/dist-packages (1.5.1)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 16, 28, 28]             160
       BatchNorm2d-2           [-1, 16, 28, 28]              32
            Conv2d-3           [-1, 16, 28, 28]           2,320
       BatchNorm2d-4           [-1, 16, 28, 28]              32
         MaxPool2d-5           [-1, 16, 14, 14]               0
            Conv2d-6           [-1, 32, 14, 14]           4,640
       BatchNorm2d-7           [-1, 32, 14, 14]              64
            Conv2d-8           [-1, 32, 14, 14]           9,248
       BatchNorm2d-9           [-1, 32, 14, 14]              64
        MaxPool2d-10             [-1, 32, 7, 7]               0
           Conv2d-11             [-1, 64, 5, 5]          18,496
      BatchNorm2d-12             [-1, 64, 5, 5]             128
           Conv2d-13             [-1, 64, 3, 3]          36,928
      BatchNorm2d-14             [-1, 64, 3, 3]             128
AdaptiveAvgPool2d-15             [-1, 64, 1, 1]               0
          Dropout-16                   [-1, 64]               0
           Linear-17                   [-1, 10]             650
================================================================
Total params: 72,890
Trainable params: 72,890
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.00
Forward/backward pass size (MB): 0.64
Params size (MB): 0.28
Estimated Total Size (MB): 0.93

........................................
torch.manual_seed(1)
batch_size = 128

kwargs = {'num_workers': 1, 'pin_memory': True} if use_cuda else {}
train_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True,
                    transform=transforms.Compose([
                        transforms.ToTensor(),
                        transforms.Normalize((0.1307,), (0.3081,))
                    ])),
    batch_size=batch_size, shuffle=True, **kwargs)
test_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=False, transform=transforms.Compose([
                        transforms.ToTensor(),
                        transforms.Normalize((0.1307,), (0.3081,))
                    ])),
    batch_size=batch_size, shuffle=True, **kwargs)


Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ../data/MNIST/raw/train-images-idx3-ubyte.gz
100%
9912422/9912422 [00:00<00:00, 213375098.77it/s]
Extracting ../data/MNIST/raw/train-images-idx3-ubyte.gz to ../data/MNIST/raw

Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ../data/MNIST/raw/train-labels-idx1-ubyte.gz
100%
28881/28881 [00:00<00:00, 1476544.29it/s]
Extracting ../data/MNIST/raw/train-labels-idx1-ubyte.gz to ../data/MNIST/raw

Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz
Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ../data/MNIST/raw/t10k-images-idx3-ubyte.gz
100%
1648877/1648877 [00:00<00:00, 66655339.42it/s]
Extracting ../data/MNIST/raw/t10k-images-idx3-ubyte.gz to ../data/MNIST/raw

Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz
Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ../data/MNIST/raw/t10k-labels-idx1-ubyte.gz
100%
4542/4542 [00:00<00:00, 298172.34it/s]
Extracting ../data/MNIST/raw/t10k-labels-idx1-ubyte.gz to ../data/MNIST/raw
........................................
from tqdm import tqdm
def train(model, device, train_loader, optimizer, epoch):
    model.train()
    pbar = tqdm(train_loader)
    for batch_idx, (data, target) in enumerate(pbar):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        pbar.set_description(desc= f'loss={loss.item()} batch_id={batch_idx}')


def test(model, device, test_loader):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)

    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))
  ..............................................
  
  
model = Net().to(device)
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

for epoch in range(1, 20):
    train(model, device, train_loader, optimizer, epoch)
    test(model, device, test_loader)
    
 .................................................
 
 model = Net().to(device)
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

for epoch in range(1, 20):
    train(model, device, train_loader, optimizer, epoch)
    test(model, device, test_loader)
    
 ..................................................
 
 loss=0.11026168614625931 batch_id=468: 100%|██████████| 469/469 [00:15<00:00, 31.06it/s]

Test set: Average loss: 0.0448, Accuracy: 9872/10000 (99%)

loss=0.029440967366099358 batch_id=468: 100%|██████████| 469/469 [00:15<00:00, 30.44it/s]

Test set: Average loss: 0.0372, Accuracy: 9888/10000 (99%)

loss=0.041211239993572235 batch_id=468: 100%|██████████| 469/469 [00:14<00:00, 31.66it/s]

Test set: Average loss: 0.0264, Accuracy: 9920/10000 (99%)

loss=0.03548504039645195 batch_id=468: 100%|██████████| 469/469 [00:14<00:00, 31.36it/s]

Test set: Average loss: 0.0234, Accuracy: 9925/10000 (99%)

loss=0.04190903902053833 batch_id=468: 100%|██████████| 469/469 [00:15<00:00, 31.25it/s]

Test set: Average loss: 0.0223, Accuracy: 9929/10000 (99%)

loss=0.021777784451842308 batch_id=468: 100%|██████████| 469/469 [00:14<00:00, 31.70it/s]

Test set: Average loss: 0.0195, Accuracy: 9944/10000 (99%)

loss=0.01987290196120739 batch_id=468: 100%|██████████| 469/469 [00:15<00:00, 30.04it/s]

Test set: Average loss: 0.0299, Accuracy: 9905/10000 (99%)

loss=0.004199202638119459 batch_id=468: 100%|██████████| 469/469 [00:14<00:00, 31.59it/s]

Test set: Average loss: 0.0199, Accuracy: 9938/10000 (99%)

loss=0.013330187648534775 batch_id=468: 100%|██████████| 469/469 [00:15<00:00, 31.18it/s]

Test set: Average loss: 0.0157, Accuracy: 9951/10000 (100%)

loss=0.022823775187134743 batch_id=468: 100%|██████████| 469/469 [00:15<00:00, 31.00it/s]

Test set: Average loss: 0.0205, Accuracy: 9939/10000 (99%)

loss=0.01571989431977272 batch_id=468: 100%|██████████| 469/469 [00:15<00:00, 31.23it/s]

Test set: Average loss: 0.0194, Accuracy: 9940/10000 (99%)

loss=0.007272023241966963 batch_id=468: 100%|██████████| 469/469 [00:14<00:00, 31.37it/s]

Test set: Average loss: 0.0170, Accuracy: 9942/10000 (99%)

loss=0.01221280824393034 batch_id=468: 100%|██████████| 469/469 [00:15<00:00, 31.18it/s]

Test set: Average loss: 0.0191, Accuracy: 9942/10000 (99%)

loss=0.015282913111150265 batch_id=468: 100%|██████████| 469/469 [00:14<00:00, 31.27it/s]

Test set: Average loss: 0.0177, Accuracy: 9941/10000 (99%)

loss=0.008562359027564526 batch_id=468: 100%|██████████| 469/469 [00:14<00:00, 31.38it/s]

Test set: Average loss: 0.0170, Accuracy: 9950/10000 (100%)

loss=0.026490474119782448 batch_id=468: 100%|██████████| 469/469 [00:15<00:00, 31.20it/s]

Test set: Average loss: 0.0186, Accuracy: 9944/10000 (99%)

loss=0.0051473998464643955 batch_id=468: 100%|██████████| 469/469 [00:14<00:00, 31.43it/s]

Test set: Average loss: 0.0166, Accuracy: 9950/10000 (100%)

loss=0.012437216006219387 batch_id=468: 100%|██████████| 469/469 [00:14<00:00, 31.28it/s]

Test set: Average loss: 0.0193, Accuracy: 9934/10000 (99%)

loss=0.006074037868529558 batch_id=468: 100%|██████████| 469/469 [00:15<00:00, 31.25it/s]

Test set: Average loss: 0.0152, Accuracy: 9959/10000 (100%)
